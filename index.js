// required resources
const inquirer = require("inquirer");
const fs = require("fs");

// link for additional file that handles generating the html
const generateHTML = require("./src/page-template");

// Sub classes to be used for each employee
const Engineer = require("./lib/Engineer");
const Intern = require("./lib/Intern");
const Manager = require("./lib/Manager");

// List of all employees that starts out blank
const employeesList = [];

// General questions to be asked of all employees, role is intentionally left blank in the question message
const baseQuestions = [
    {
        type: "input",
        message: `What is the 's name?`,
        name: "name",
        prefix: "-",
        validate: Boolean
    },
    {
        type: "input",
        message: `What is the 's employee ID?`,
        name: "empID",
        prefix: "-",
        validate: Boolean
    },
    {
        type: "input",
        message: `What is the 's email address?`,
        name: "email",
        prefix: "-",
        validate: Boolean
    }
];

// Function to create a Manager employee
function generateManager() {
    // Manager description variable to be inserted into questions
    const employeeRole = "team manager"
    // New array of questions is created from the base question array
    const questionsManager = JSON.parse(JSON.stringify(baseQuestions));
    // Array of questions is sorted through, adding in the manager description to each question
    for (let i = 0; i < questionsManager.length; i++) {
        const a = questionsManager[i].message;
        questionsManager[i].message = [a.slice(0, 12), employeeRole, a.slice(12)].join('');
    }
    // Additional question just for managers is added to question array 
    questionsManager.push(
        {
            type: "input",
            message: "What is the team manager's office number?",
            name: "office",
            prefix: "-",
            validate: Boolean
        }
    );
    // User is asked the manager generating questions
    inquirer.prompt(questionsManager)
    .then((response) => {
        // Manager employee is generated by passing the question responses through the manager sub-class
        const newManager = new Manager(response);
        // Manager is pushed to list of employees
        employeesList.push(newManager);
        // Run the application to ask what to do next
        teamMemberChoice();
    })
}

// Function to create an Engineer employee
function generateEngineer() {
    // Engineer description variable to be inserted into questions
    const employeeRole = "engineer"
    // New array of questions is created from the base question array
    const questionsEngineer = JSON.parse(JSON.stringify(baseQuestions));
    // Array of questions is sorted through, adding in the engineer description to each question
    for (let i = 0; i < questionsEngineer.length; i++) {
        const a = questionsEngineer[i].message;
        questionsEngineer[i].message = [a.slice(0, 12), employeeRole, a.slice(12)].join('');
    }
    // Additional question just for engineers is added to the question array
    questionsEngineer.push(
        {
            type: "input",
            message: "What is the engineer's GitHub username?",
            name: "github",
            prefix: "-",
            validate: Boolean
        }
    );
    // User is asked the engineer generating questions
    inquirer.prompt(questionsEngineer)
    .then((response) => {
        // Engineer employee is generated by passing the question responses through the engineer sub-class
        const newEngineer = new Engineer(response);
        // Engineer is pushed to list of employees
        employeesList.push(newEngineer);
        // Run the application to ask what to do next
        teamMemberChoice();
    })
}

// Function to create an Intern employee
function generateIntern() {
    // Intern description variable to be inserted into questions
    const employeeRole = "intern"
    // New array of questions is created from the base question array
    const questionsIntern = JSON.parse(JSON.stringify(baseQuestions));
    // Array of questions is sorted through, adding in the intern description to each question
    for (let i = 0; i < questionsIntern.length; i++) {
        const a = questionsIntern[i].message;
        questionsIntern[i].message = [a.slice(0, 12), employeeRole, a.slice(12)].join('');
    }
    // Additional question just for interns is added to the question array
    questionsIntern.push(
        {
            type: "input",
            message: "What school is the intern attending?",
            name: "school",
            prefix: "-",
            validate: Boolean
        }
    );
    // User is asked the intern generating questions
    inquirer.prompt(questionsIntern)
    .then((response) => {
        // Intern employee is generated by passing the question responses through the intern sub-class
        const newIntern = new Intern(response);
        // Intern is pushed to the list of employees
        employeesList.push(newIntern);
        // Run the application to ask what to do next
        teamMemberChoice();
    })
}

// Ask for which team member they want to add or are they done (ends app and generates file when done)
function teamMemberChoice() {
    console.log("");
    // Inquirer prompt to ask user what they want to do next
    inquirer.prompt([
        {
        type: 'list',
        message: 'What type of team member would you like to add next?',
        name: 'choice',
        choices: ['Engineer', 'Intern', "None, I am done adding team members"],
        prefix: '-'
        }
    ])
    .then((response) => {
        console.log("");
        // If statement to determine next step based on user's choice
        if(response.choice === "Engineer") {
            // Start generation of engineer employee
            generateEngineer();
        } else if(response.choice === "Intern") {
            // Start generation of intern employee
            generateIntern();
        } else {
            // Create the final html contents by sending all the employee ojects to the generation app and assigning the response to a variable
            const htmlContent = generateHTML(employeesList);
            // Initiate the function to create the html file using a pre-determined filename and the html data that was generated
            writeToFile("./dist/team-profile.html", htmlContent);
        }
    })
}

// Function for creating the html file
function writeToFile(fileName, data) {
    fs.writeFile(fileName, data, (err) =>
    err ? console.error(err) : console.log('Team profile HTML page generated in "dist" folder!'));
}

// Initial app function ran when user starts program
function init() {
    // Short intro to be displayed before user begins
    console.log("");
    console.log("Welcome to the Team Profile Generator!");
    console.log("Please begin by entering details about your team's Manager.");
    console.log("");
    // Start generation of manager employee
    generateManager()
}

// First function called when app is run
init();
